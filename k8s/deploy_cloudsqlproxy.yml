apiVersion: apps/v1
kind: Deployment
metadata:
  name: mct-qa-records-api
  namespace: dev
spec:
  selector:
    matchLabels:
      app: mct-qa-records-api
  template:
    metadata:
      labels:
        app: mct-qa-records-api
    spec:
      containers:
      - name: mct-qa-records-api
        image: us.gcr.io/katchplus/mct-qa-records-api:dev
        imagePullPolicy: Always
        ports:
        - containerPort: 443
        # ... other container configuration
        env:
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: mct-db-credentials
              key: username
        - name: DB_PASS
          valueFrom:
            secretKeyRef:
              name: mct-db-credentials
              key: password
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: mct-db-credentials
              key: database
      - name: cloud-sql-proxy
        # It is recommended to use the latest version of the Cloud SQL proxy
        # Make sure to update on a regular schedule!
        image: gcr.io/cloudsql-docker/gce-proxy:1.17
        command:
          - "/cloud_sql_proxy"

          # If connecting from a VPC-native GKE cluster, you can use the
          # following flag to have the proxy connect over private IP
          # - "-ip_address_types=PRIVATE"

          # Replace DB_PORT with the port the proxy should listen on
          # Defaults: MySQL: 3306, Postgres: 5432, SQLServer: 1433
          - "-instances=curationtool-beb47:us-central1:metadata-db=tcp:5432"

          # This flag specifies where the service account key can be found
          - "-credential_file=/secrets/service_account.json"
        securityContext:
          # The default Cloud SQL proxy image runs as the
          # "nonroot" user and group (uid: 65532) by default.
          runAsNonRoot: true
        volumeMounts:
        - name: serviceaccount-mctkey-volume
          mountPath: /secrets/
          readOnly: true
        # Resource configuration depends on an application's requirements. You
        # should adjust the following values based on what your application
        # needs. For details, see https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        resources:
          requests:
            # The proxy's memory use scales linearly with the number of active
            # connections. Fewer open connections will use less memory. Adjust
            # this value based on your application's requirements.
            memory: "2Gi"
            # The proxy's CPU use scales linearly with the amount of IO between
            # the database and the application. Adjust this value based on your
            # application's requirements.
            cpu:    "1"
      volumes:
      - name: serviceaccount-mctkey-volume
        secret:
          secretName: serviceaccount-mctkey